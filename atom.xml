<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Personal small nest</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/jinjina/jinjina.github.io/"/>
  <updated>2018-03-22T15:53:58.534Z</updated>
  <id>https://github.com/jinjina/jinjina.github.io/</id>
  
  <author>
    <name>进进吖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS--获取验证码</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/38c9e2c9/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/38c9e2c9/</id>
    <published>2018-03-22T15:53:18.000Z</published>
    <updated>2018-03-22T15:53:58.534Z</updated>
    
    <content type="html"><![CDATA[<p>JS–获取验证码<br><a id="more"></a></p><p>   let str=”abcdefghigklmnopqrstuvwxyz”+”0123456789”+”abcdefghigklmnopqrstuvwxyz”.toLocaleUpperCase();<br> let code=document.getElementById(“code”);<br> let chang=document.getElementById(“chang”);</p><p>function ff() {<br>    let s=””;<br>    for (let i=0;i&lt;4;i++){<br>        let b=Math.round(Math.random()*61);<br>        s+=str[b];<br>        code.innerHTML=s;<br>    }<br>}<br> chang.onclick=ff</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–获取验证码&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--原型继承</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/82ffdd24/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/82ffdd24/</id>
    <published>2018-03-22T15:49:46.000Z</published>
    <updated>2018-03-22T15:51:09.484Z</updated>
    
    <content type="html"><![CDATA[<p>JS–原型继承<br><a id="more"></a></p><p>   function A() {<br>        this.a=”a”<br>    }<br>    A.prototype.getA=function () {<br>        console.log(this.a);<br>    }<br>    function B() {<br>        this.b=”b”<br>    }<br>    B.prototype.getB=function () {<br>        console.log(this.b);<br>    };<br>    A的原型等于B的实例<br>    A.prototype=new B():这个可以获取B的实例的私有属性b,也可以通过<strong>proto</strong>得到B的原型上的公有方法getB<br>    弊端：A.prototype原来的属性和方法就没了<br>    A.prototype=new B();</p><p>   Object.assign(A.prototype,new B) 既保留了A.prototype原来的方法和属性，还可以拿到B的实例的私有属性</p><p>   弊端：获取不到B的原型上的公有属性和方法<br>    Object.assign(A.prototype,new B);</p><p>   综上所述，结合自己写的方法，即实现了合并对象也实现了获取原型上的公有方法<br>    assign(A.prototype,new B)<br>    var a=new A;<br>    var b=new B;<br>    console.log(a);<br>    合并对象<br>    Object.assign(obj1,obj2)<br>    将obj2合并到obj1<br>    合并对象只能拿到私有的，不能拿到公有的</p><p>   function assign(obj1,obj2) {<br>        将obj2的私有属性给obj1，当做私有属性，将obj2的公有属性给obj1,当做公有属性<br>        for(var key in obj2){<br>            if(obj2.hasOwnProperty(key)){<br>                obj1[key]=obj2[key];<br>            }else {<br>                obj1.<strong>proto</strong>[key]=obj2[key]<br>            }<br>        }<br>    }</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–原型继承&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--Url地址解析方法</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/11e73ae9/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/11e73ae9/</id>
    <published>2018-03-22T15:04:53.000Z</published>
    <updated>2018-03-22T15:33:22.512Z</updated>
    
    <content type="html"><![CDATA[<p>JS–Url地址解析方法<br><a id="more"></a></p><p> function fn1(url) {<br>         var ary=url.split(“?”)[1].split(“&amp;”);<br>         //[‘course1=ss’,’course2=css’,’course3=jQ’]<br>         var obj={};<br>         ary.forEach(function (item) {<br>             var a=item.split(“=”);<br>             obj[a[0]]=a[1];<br>         });<br>         return obj<br>     }</p><p>   方法二:</p><p>   function fn2(url) {<br>         var ary=url.split(/[?&amp;=]/g);<br>         ary.shift();<br>         var obj={};<br>         for(var i=0;i&lt;ary.length;i+=2){<br>             obj[ary[i]]=ary[i+1];<br>         }<br>         return obj<br>     }</p><p>   方法三:</p><p>   function fn3(url) {<br>         //“{course1:’ss’,course2:’css’,course3:’jQ’}”<br>         //“ course1= ss &amp;course2=css  &amp;course3=jQ   “<br>         //=  -&gt;  :’<br>         //&amp;  -&gt;  ‘,<br>         url=url.split(“?”)[1];<br>         var str=url.replace(/=/g,”:’”).replace(/&amp;/g,”‘,”);<br>         str=”({“+str+”‘})”;<br>         return eval(str);<br>         //可以将上面的简写成下面的<br>         return eval(“({“+ url.split(“?”)[1].replace(/=/g,”:’”).replace(/&amp;/g,”‘,”)+”‘})”);<br>     }<br>     console.log(fn3(url));</p><p>   方法四:</p><p>   function fn4(url) {<br>         var reg=/<a href="\w+">?&amp;</a>=(\w+)/g;<br>         var obj={};<br>         url.replace(reg,function () {<br>             obj[arguments[1]]=arguments[2]<br>         });<br>         return obj<br>     }<br>     console.log(fn4(url));</p><p>   方法5:</p><p>   function fn5(url) {<br>        return eval(“({“+url.split(“?”)[1].replace(/&amp;?(\w+)=(\w+)/g, “$1:’$2’,”)+”})”);<br>    }</p><p>function num(url) {<br>    let sum=url.indexOf(“?”),<br>        obj={};<br>    if(sum===-1){<br>       return obj<br>    }<br>    url=url.substr(sum+1);<br>    var ary=url.split(“&amp;”);<br>    for (var i = 0; i &lt; ary.length; i++) {<br>          let cur=ary[i].split(“=”);<br>          obj[cur[0]]=cur[1]<br>    }<br>    return obj;<br>}<br>console.log(num(str));</p><p>String.prototype.sum=function sum () {<br>     let obj={};<br>      let reg=/([^?=&amp;]+)=([^?=&amp;]+)/g;<br>      this.replace(reg,function () {<br>          let arr=arguments;<br>          obj[arr[1]]=arr[2]<br>      });<br>    return obj<br>};<br>console.log(str.sum());</p><p>var obj={};<br>var sum=str.indexOf(“?”);<br>str=str.substring(sum+1);<br>var ary=str.split(“&amp;”);<br>for (var i = 0; i &lt; ary.length; i++) {<br>       var cur=ary[i];<br>       var curAry=cur.split(“=”),<br>           key=curAry[0],<br>           value=curAry[1];<br>       obj[key]=value;<br>}<br>console.log(obj);</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–Url地址解析方法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--Call继承</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/683ebf7b/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/683ebf7b/</id>
    <published>2018-03-22T15:02:07.000Z</published>
    <updated>2018-03-22T15:03:23.861Z</updated>
    
    <content type="html"><![CDATA[<p>JS–Call继承<br><a id="more"></a></p><p>   Function.prototype.call=function () {<br>      this 表示的是实例 f1<br>      把arguments变成数组<br>        var ary=[…arguments];<br>       if(ary[0]==undefined){<br>           没传，null，undefined<br>           让this执行里面的this变成window<br>           ary.shift();<br>           eval(“this(“+ary+”)”);<br>       }else {<br>           //将传进来的参数变成一个对象<br>           var obj=Object(arguments[0]);<br>           给obj所属类的原型上增加一个属性，属性值就是this<br>            obj.<strong>proto</strong>.fn=this;<br>            ary.shift();<br>            eval(“obj.fn(“+ary+”)”);<br>           将增加的属性删除<br>           delete obj.<strong>proto</strong>.fn;<br>       }<br>    };</p><p>   var obj={a:1};<br>    function f1(m,n) {<br>        console.log(this);<br>        console.log(m,n);<br>    }<br>    f1.call(obj,2,5);</p><p>   Object方法，将你传进来的东西变成一个对象返回</p><p>Function.prototype.call=function(){<br>var ary=[…arguments];<br>ary.shift();<br>  if(arguments[0]==undefined){<br>    this(…ary);  //展开里面的每一项<br>    return;<br>  }<br>  var obj=Object(arguments[0]);<br>  obj.fn=this;<br>  this(…ary);<br>  delete obj.fn<br>  }</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–Call继承&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--原型上的数组去重</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/97809bdb/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/97809bdb/</id>
    <published>2018-03-22T14:57:42.000Z</published>
    <updated>2018-03-22T14:59:53.588Z</updated>
    
    <content type="html"><![CDATA[<p>JS–原型上的数组去重<br><a id="more"></a></p><p>   Array.prototype.remove = function () {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this.indexOf(this[i]) !== this.lastIndexOf(this[i])) {<br>            this.splice(i, 1);<br>            i–;<br>        }<br>    }<br>    return this;<br>};<br>console.log([1, 1, 2, 2, 2, 5, 5,  5, 4, 1, 2, 3].remove());</p><p>Array.prototype.remove=function () {<br>    this==实例<br>    var _this=this;<br>    return this.filter(function (item,index) {<br>        this==window<br>        return !_this.slice(0,index).includes(item)<br>    })<br>};<br>console.log([1, 1, 1, 1, 2, 2].remove());</p><p>  利用对象的属性名不可以重复来实现数组去重<br>    Array.prototype.remove=function () {<br>        var obj={},ary=[];<br>        this.forEach(function (item) {<br>            obj[item]=item;<br>        })<br>        for (var key in obj){<br>            key是字符串<br>            ary.push(obj[key])<br>        }<br>        return ary;<br>    }</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–原型上的数组去重&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--数组方法整理</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/75415fbc/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/75415fbc/</id>
    <published>2018-03-22T14:54:02.000Z</published>
    <updated>2018-03-22T14:56:10.067Z</updated>
    
    <content type="html"><![CDATA[<p>JS–数组方法整理<br><a id="more"></a></p><p> “use strict”; 严格模式<br>        function f1() {<br>            console.log(this);<br>        }<br>        f1.call(null); this  -&gt;null<br>        f1.call();  this  –&gt;undefined<br>        f1.call(undefined); this  –&gt;undefined</p><p>   在严格模式下函数执行前面没有点this就是undefined<br>        f1();<br>        console.log(window.f1());</p><p>   类数组转数组:</p><p>   function ff() {<br>            var ary=[…arguments];<br>            return ary;<br>        }<br>    console.log(ff(1, 2, 3));</p><p>   function ff(item) {<br>            var ary=[];<br>            for (var i=0;i&lt;item.length;i++){<br>                ary.push(item[i]);<br>            }<br>            return ary<br>        }<br>        function sum() {<br>            return ff(arguments)<br>        }</p><p>   console.log(sum(1, 2, 3));</p><p>   通过原型上的方法:</p><p>   function ff(a) {<br>        return Array.prototype.slice.call(a);<br>    }<br>    function sum() {<br>        return ff(arguments)<br>    }<br>    console.log(sum(7, 8, 9));</p><p>   检测数据额类型:</p><p>   console.log(typeof (1));<br>        function sum(fn) {<br>            return fn.constructor.name;<br>            return Array.prototype.toString.call(fn)<br>        }<br>    console.log(sum(1, 2, 3));</p><p>   var obj={a:”哈哈”,b:12};</p><p>   var aa=new Object;</p><p>   console.log(obj instanceof Object);</p><p>   最大值:</p><p>   var ary=[1,2,3,5,6,7,8];<br>    function sum() {<br>        return Math.max.apply(null,ary)<br>    }<br>    console.log(sum());</p><p>   function ff() {<br>        return eval(“Math.max(“+ary+”)”)<br>    }<br>    console.log(ff());</p><p>   json:</p><p>   var dataObj=[{“a”:”哈哈”,”b”:12}];<br>    var dataStr=’[{“name”:”a”,”age”:2},{“name”:”b”,”age”:12},{“name”:”c”,”age”:22},{“name”:”d”,”age”:32}]’;</p><p>   对象转字符串:</p><p>   console.log(JSON.stringify(dataObj));</p><p>   将字符串转对象:</p><p>   console.log(JSON.stringify(dataStr));</p><p>   var s=’{“name”:”a”,”age”:12}’;<br>    console.log(eval(“(“ + s + “)”));<br>    var ff=Function(“return”+s);<br>    console.log(ff());</p><p>   var ary=[1,2,5,1,5,5,6,8,6,2,1];<br>        Array.prototype.remove=function () {<br>        var ary1=[];<br>        for(var i=0;i&lt;ary.length;i++){<br>            if(!ary1.includes(ary[i])){<br>                ary1.push(ary[i])<br>            }<br>        }<br>        return ary1<br>    };<br>    console.log(ary.remove());</p><p>   数组去重:</p><p>   Array.prototype.remove = function () {<br>        this==实例<br>        for(var i=0;i&lt;this.length;i++){<br>            if(this.indexOf(this[i])!==this.lastIndexOf(this[i])){<br>                this.splice(i,1);<br>                i–;<br>            }<br>        }<br>        return this;<br>    };<br>    console.log(ary.remove());</p><p>   Array.prototype.remove=function () {<br>        var a=this;<br>        return this.filter(function (item,index) {<br>            return !a.slice(0,index).includes(item)<br>        })<br>    };<br>    console.log(ary.remove());</p><p>   var ary=[1,2,3,1,4,1,5,1,8,5,4,1,1];<br>    function fn(ary) {<br>        return [Array.from(new Set(ary))];<br>    }<br>    console.log(fn(ary));</p><p>   function fn(ary) {<br>        return […new Set(ary)];<br>    }<br>    console.log(fn(ary));</p><p>   数组排序：</p><p>function mySort() {<br>    var tags=new Array();<br>    tags=Array.prototype.slice.call(arguments);<br>    tags.sort(function (a,b) {<br>        return a-b<br>    });<br>    return tags;<br>}<br>    console.log(mySort(50, 11, 16, 32, 24, 99, 57, 100));</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–数组方法整理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--数组求和</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/ad68a086/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/ad68a086/</id>
    <published>2018-03-22T14:45:54.000Z</published>
    <updated>2018-03-22T14:46:47.750Z</updated>
    
    <content type="html"><![CDATA[<p>JS–数组求和<br><a id="more"></a></p><p>   var ary1=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,75,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];<br>var ary2=[];<br>for(var i=0;i&lt;100;i++){<br>    if(i%7===0){<br>        ary2.push(ary1[i]);<br>    }<br>}<br>    console.log(ary2);<br>   var ary1=ary2.join(“+”);<br>    console.log(ary1);<br>    var ary3=eval(ary1);<br>    console.log(ary3);</p><p>   function sum() {<br>    var a=0;<br>    for(var i=0;i&lt;arguments.length;i++){<br>        if(!isNaN(arguments[i])){<br>           a+=arguments[i]<br>        }<br>    }<br>    return a<br>}</p><p>console.log(sum(11, 22, 33));</p><p>function ff() {<br>    var a=0;<br>    for(var i=0;i&lt;arguments.length;i++){<br>        a+=arguments[i];<br>    }<br>    return a<br>}</p><p>console.log(ff(11, 2, 2, 20));</p><p>function fn() {<br>   var arguments=[].slice.call(arguments);<br>   for(var i=0;i&lt;arguments.length;i++){<br>       return eval(“(“+arguments.join(“+”)+”)”)<br>   }<br>}</p><p>console.log(fn(11, 22, 66));</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–数组求和&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--数组中回调函数原理</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/47e14251/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/47e14251/</id>
    <published>2018-03-22T14:43:34.000Z</published>
    <updated>2018-03-22T14:44:54.668Z</updated>
    
    <content type="html"><![CDATA[<p>JS–数组中回调函数原理<br><a id="more"></a></p><p>   函数当做参数，叫做回调函数<br>    例如：数组中的很多方法，是传进去一个函数去执行的<br>    var ary=[1,2,3,5,6];<br>    第一个参数是一个函数，第二个参数是改变前面函数this的<br>    Array.prototype.forEach(function (fn,obj) {<br>        this表示 数组实例<br>        循环数组让函数fn，依次执行执行的时候通过call改变fn的this，给fn传三个参数，（当前项this[i],i索引，this，原数组this）<br>        for(var i=0;i&lt;this.length;i++){<br>            fn.call(obj,this[i],i,this)<br>        }<br>    });</p><p>   ary.forEach(function (item,index,input) {  不需要返回值<br>            第二个参数是改变前面函数this<br>        console.log(this);<br>    },ary)</p><p>   Array.prototype.map=function (fn,obj) {<br>   循环数组让函数fn，依次执行执行的时候通过call改变fn的this，给fn传三个参数，<br>     （当前项this[i],i索引，this，原数组this），将返回值push到ary中<br>    有返回值，返回值：fn每次执行的结果组成的新数组，<br>        var ary=[];<br>        for(var i=0;i&lt;this.length;i++){<br>            ary.push(fn.call(obj,this[i],i,this))<br>        }<br>        return ary;<br>    }<br>    var a=ary.map(function (item,index,input) {<br>        return item+index<br>    })<br>    console.log(a);</p><p>   Array.position.find=function (fn,obj) {<br>        循环数组让函数fn，依次执行执行的时候通过call改变fn的this，给fn传三个参数，<br>         （当前项this[i],i索引，this，原数组this)一直到fn的返回值是turn的时候停止循环，返回当前项this[i]<br>            for (var i=0;i&lt;this.length;i++){<br>                if(fn.call(obj,this[i],i,input)){<br>                    return this[i]; 返回当前项<br>                }<br>            }<br>        };<br>        var a=Array.prototype.find=(function (item,index,input) {  找到的结果为turn，就返回当前项<br>            console.log(item);<br>            return item===3;<br>        });<br>        console.log(a);</p><p>   Array.position.findIndex=function (fn,obj) {<br>            循环数组让函数fn，依次执行执行的时候通过call改变fn的this，给fn传三个参数，<br>             （当前项this[i],i索引，this，原数组this)一直到fn的返回值是turn的时候停止循环，返回当前项索引[i]<br>            for (var i=0;i<this.length;i++){ if(fn.call(obj,this[i],i,input)){="" return="" [i];="" 返回当前项索引="" }="" };="" array.prototype.filter="function" (fn,obj)="" {="" 循环数组让函数fn，依次执行执行的时候通过call改变fn的this，给fn传三个参数，="" （当前项this[i],i索引，this，原数组this），将返回值是turn的对应的原数组this的那一项this[i],push到ary中="" 返回值是新的数组="" var="" ary="[];" for(var="" i="0;i<this.length;i++){" if(fn.call(obj.this[i],i,this)){="" ary.push(this[i])="" ary;="" a="ary.find(function" (item,index,input)="" console.log(item);="" item="">3<br>    });<br>    console.log(a);</this.length;i++){></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–数组中回调函数原理&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--数组中的方法</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/dd2140a1/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/dd2140a1/</id>
    <published>2018-03-22T14:37:50.000Z</published>
    <updated>2018-03-22T14:39:19.496Z</updated>
    
    <content type="html"><![CDATA[<p>JS–数组中的方法<br><a id="more"></a></p><p>   var a=[1,2,3];<br>Array.prototype.unshift=function () {<br>    var str=””;var ary=null;<br>    for(var i=0;i&lt;arguments.length;i++){<br>        str+=arguments[i]+”,”;<br>    }<br>    ary=eval(“[“+str+this+”]”);<br>    for(var k=0;k&lt;ary.length;k++){<br>        this[k]=ary[k]<br>    }<br>    return ary.length;<br>};<br>    console.log(a.unshift(20, 3));<br>    console.log(a);</p><p>   Array.prototype.push=function () {<br>        for(var i=0;i&lt;arguments.length;i++){<br>            this[this.length]=arguments[i];<br>        }<br>        return this.length;<br>    }<br>    console.log(a.push(8, 9));<br>    console.log(a);</p><p>   Array.prototype.pop=function () {<br>        var num=this[this.length-1];<br>        this.length–;<br>        return num;<br>    }<br>    console.log(a.pop());<br>    console.log(a);</p><p>Array.prototype.shift=function () {<br>    var num=this[0];<br>    for(var i=1;i&lt;this.length;i++){<br>        this[i-1]=this[i];<br>    }<br>    this.length–;<br>    return num<br>}<br>    console.log(a.shift());<br>    console.log(a);</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–数组中的方法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS--数组去重</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/cc0665b2/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/cc0665b2/</id>
    <published>2018-03-22T14:29:47.000Z</published>
    <updated>2018-03-22T14:32:34.047Z</updated>
    
    <content type="html"><![CDATA[<p>JS–数组去重<br><a id="more"></a></p><p>   let ary1=[1,2,1,2,1,23,4,1,23,24,4,5,2,3,6,7];<br>    function ff(item) {<br>        var ary=[];<br>        for(var i=0;i&lt;ary1.length;i++){<br>            if(!ary.includes(item[i])){<br>                ary.push(item[i])<br>            }<br>        }<br>        return ary<br>    }<br>     console.log(ff(ary1));</p><p>   var ary2=ary1.filter(function (item,index) {<br>        return !ary1.slice(0,index).includes(item)<br>    });<br>     console.log(ary2);</p><p>   for(var i=0;i&lt;ary1.length;i++){<br>         if(ary1.indexOf(ary1[i])==!ary1.lastIndexOf(ary1[i])){<br>             ary1.splice(i,1);<br>             i–;<br>         }<br>     }<br>     console.log(ary1);</p><p>Array.prototype.remove=function () {<br>    var obj={},ary=[];<br>    this.forEach(function (item) {<br>        obj[item]=item;<br>    })<br>    for(var key in obj){<br>        ary.push(obj[key])<br>    }<br>    return ary;<br>}<br>console.log([1,1,1,2,2,2,3,5,5,5,6,8,8,9].remove());</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS–数组去重&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/jinjina/jinjina.github.io//posts/16107/"/>
    <id>https://github.com/jinjina/jinjina.github.io//posts/16107/</id>
    <published>2018-03-22T13:48:37.962Z</published>
    <updated>2018-03-22T14:28:57.626Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
